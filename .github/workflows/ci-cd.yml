# name: CI/CD Pipeline for PetClinic

# on:
#   push:
#     branches: [main]
#     paths-ignore:
#       - "kubernetes/apps/petclinic/petclinic-deployment.yaml" # Ignora cambios en el manifiesto de despliegue
#   pull_request:
#     branches: [main]
#   workflow_dispatch:

# permissions:
#   contents: write # Permiso para escribir en el repositorio

# env:
#   ACR: ${{ secrets.ACR_LOGIN_SERVER }}
#   IMAGE_NAME: petclinic

# jobs:
#   # ───── CI: build & tests ─────
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           java-version: "17"
#           distribution: "temurin"
#           cache: maven

#       - name: Build with Maven
#         run: ./mvnw clean package -DskipTests

#       - name: Run tests
#         run: ./mvnw test

#       - name: Upload artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: petclinic-jar
#           path: target/*.jar

#   # ───── CD (parte 1): Docker build & push ─────
#   docker:
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.event_name != 'pull_request'
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Download artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: petclinic-jar
#           path: target/

#       - name: Login to Azure
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}

#       - name: Login to ACR
#         uses: azure/docker-login@v1
#         with:
#           login-server: ${{ env.ACR }}
#           username: ${{ secrets.ACR_USERNAME }}
#           password: ${{ secrets.ACR_PASSWORD }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: Dockerfile
#           push: true
#           tags: |
#             ${{ env.ACR }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
#             ${{ env.ACR }}/${{ env.IMAGE_NAME }}:latest

#   # ───── CD (parte 2): Actualizar manifiesto para ArgoCD ─────
#   update-argocd:
#     needs: docker
#     runs-on: ubuntu-latest
#     if: github.event_name != 'pull_request' && !contains(github.event.head_commit.message, '[skip ci]')
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configurar Git
#         run: |
#           git config user.name "GitHub Actions Bot"
#           git config user.email "actions@github.com"

#       - name: Actualizar imagen en manifiesto
#         env:
#           SHA: ${{ github.sha }}
#         run: |
#           # Definir ubicación del archivo
#           DEPLOYMENT_FILE="kubernetes/apps/petclinic/petclinic-deployment.yaml"

#           # Verificar si el archivo existe
#           if [ ! -f "$DEPLOYMENT_FILE" ]; then
#             echo "Error: El archivo $DEPLOYMENT_FILE no existe"
#             exit 1
#           fi

#           # Obtener la imagen actual
#           CURRENT_IMAGE=$(grep -o "image: ${ACR}/${IMAGE_NAME}:[a-zA-Z0-9]*" $DEPLOYMENT_FILE | cut -d':' -f3 || echo "")

#           # Si la imagen ya está actualizada, salir
#           if [ "$CURRENT_IMAGE" == "$SHA" ]; then
#             echo "La imagen ya está actualizada con la versión actual ($SHA). No se requiere cambio."
#             exit 0
#           fi

#           # Actualizar la imagen
#           sed -i "s|image: ${ACR}/${IMAGE_NAME}:.*|image: ${ACR}/${IMAGE_NAME}:${SHA}|g" $DEPLOYMENT_FILE

#           # Commit y push con mensaje especial que evita el trigger
#           git add "$DEPLOYMENT_FILE"
#           git commit -m "[skip ci] Actualizar imagen de petclinic a ${SHA}"
#           git push

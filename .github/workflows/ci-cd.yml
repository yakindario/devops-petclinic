name: CI/CD Pipeline for PetClinic

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build with Maven
        run: ./mvnw package -DskipTests

      - name: Run tests
        run: ./mvnw test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: petclinic-jar
          path: target/*.jar

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: petclinic-jar
          path: target/

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.ACR_LOGIN_SERVER }}/petclinic:${{ github.sha }}
            ${{ secrets.ACR_LOGIN_SERVER }}/petclinic:latest

  # deploy:
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'pull_request'
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - uses: azure/aks-set-context@v3
  #       with:
  #         resource-group: ${{ secrets.RESOURCE_GROUP }}
  #         cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

  #     - name: Install ArgoÂ CD CLI
  #       run: |
  #         curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
  #         chmod +x argocd && sudo mv argocd /usr/local/bin

  #     - name: Sync via token
  #       env:
  #         ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  #         ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
  #       run: |
  #         argocd app sync petclinic \
  #           --server "$ARGOCD_SERVER" \
  #           --auth-token "$ARGOCD_AUTH_TOKEN" \
  #           --insecure --grpc-web --timeout 300
